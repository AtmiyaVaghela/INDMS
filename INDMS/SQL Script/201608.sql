ALTER TABLE [dbo].[QAP]
    ADD [POId] NUMERIC (18) NULL;
	
CREATE TABLE [dbo].[Files]
(
	[Id] NUMERIC NOT NULL PRIMARY KEY IDENTITY, 
    [FileNo] VARCHAR(MAX) NULL, 
    [Subject] VARCHAR(MAX) NULL, 
    [FilePath] VARCHAR(MAX) NULL, 
    [CreatedBy] VARCHAR(MAX) NULL, 
    [CreatedDate] DATETIME NULL DEFAULT GETDATE()
);

CREATE TABLE [dbo].[AdminCorrespondence]
(
	[Id] NUMERIC NOT NULL PRIMARY KEY IDENTITY, 
    [FileNo] VARCHAR(MAX) NULL, 
    [LetterNo] VARCHAR(MAX) NULL, 
    [Subject] VARCHAR(MAX) NULL, 
    [TypeOf] VARCHAR(MAX) NULL, 
    [From] VARCHAR(MAX) NULL, 
    [To] VARCHAR(MAX) NULL, 
    [CopyTo] VARCHAR(MAX) NULL, 
    [Date] DATETIME NULL, 
    [FilePath] VARCHAR(MAX) NULL, 
    [CreatedBy] VARCHAR(MAX) NULL, 
    [CreatedDate] DATETIME NULL DEFAULT GETDATE()
);

CREATE TABLE [dbo].[Photographs] (
    [Id]          NUMERIC (18)  IDENTITY (1, 1) NOT NULL,
    [FolderName]  VARCHAR (MAX) NULL,
    [Subject]     VARCHAR (MAX) NULL,
    [Date]        DATETIME      NULL,
    [FilePath] VARCHAR(MAX) NULL, 
	[CreatedDate] DATETIME      DEFAULT (getdate()) NULL,
    [CreatedBy]   VARCHAR (MAX) NULL,
    
    PRIMARY KEY CLUSTERED ([Id] ASC)
);

CREATE TABLE [dbo].[TYMemo]
(
	[Id] NUMERIC NOT NULL PRIMARY KEY, 
    [FileNo] VARCHAR(MAX) NULL, 
    [TYMemoNO] VARCHAR(MAX) NULL, 
    [Subject] VARCHAR(MAX) NULL, 
    [Date] DATETIME NULL , 
    [FilePath] VARCHAR(MAX) NULL, 
    [CreatedDate] VARCHAR(MAX) NULL DEFAULT GETDATE(), 
    [CreatedBy] VARBINARY(MAX) NULL
);

ALTER TABLE [dbo].[User]
    ADD [OfficerRank] VARCHAR (MAX) NULL;

ALTER TABLE [dbo].[User]
    ADD [ContactNo] VARCHAR (MAX) NULL;

GO
ALTER TABLE [dbo].[PurchaseOrder]
    ADD [Subject]    VARCHAR (MAX) NULL,
        [Equipment]  VARCHAR (MAX) NULL,
        [SparesqFor] VARCHAR (MAX) NULL;

EXECUTE sp_rename @objname = N'[dbo].[PurchaseOrder].[SparesqFor]', @newname = N'SparesFor', @objtype = N'COLUMN';

ALTER TABLE [dbo].[FCL] DROP COLUMN [Details], COLUMN [POSrNo];

CREATE TABLE [dbo].[FCLDetails] (
    [Id]        NUMERIC (18)  IDENTITY (1, 1) NOT NULL,
    [FCLId]     NUMERIC (18)  NOT NULL,
    [POSrNo]    VARCHAR (MAX) NULL,
    [PODetails] VARCHAR (MAX) NULL,
    [Active]    VARCHAR (10)  NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);

ALTER TABLE [dbo].[FCL]
    ADD [Flag] VARCHAR (MAX) DEFAULT ('OPEN') NULL;
/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

/*
Deployment script for INDMS20160716

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "INDMS20160716"
:setvar DefaultFilePrefix "INDMS20160716"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL12.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL12.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO

IF (SELECT OBJECT_ID('tempdb..#tmpErrors')) IS NOT NULL DROP TABLE #tmpErrors
GO
CREATE TABLE #tmpErrors (Error int)
GO
SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL READ COMMITTED
GO
BEGIN TRANSACTION
GO
PRINT N'Dropping unnamed constraint on [dbo].[Drawings]...';


GO
ALTER TABLE [dbo].[Drawings] DROP CONSTRAINT [DF__Drawings__Create__108B795B];


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Starting rebuilding table [dbo].[Drawings]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Drawings] (
    [Id]           NUMERIC (18)  IDENTITY (1, 1) NOT NULL,
    [POId]         NUMERIC (18)  NULL,
    [PONo]         VARCHAR (MAX) NULL,
    [FileNo]       VARCHAR (MAX) NULL,
    [DrawingNo]    VARCHAR (MAX) NOT NULL,
    [Subject]      VARCHAR (MAX) NOT NULL,
    [ApprovalDate] DATETIME      NOT NULL,
    [ApprovalBy]   VARCHAR (MAX) NOT NULL,
    [CreatedBy]    VARCHAR (MAX) NULL,
    [CreatedDate]  DATETIME      DEFAULT (getdate()) NULL,
    [FilePath]     VARCHAR (MAX) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Drawings])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Drawings] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Drawings] ([Id], [PONo], [FileNo], [DrawingNo], [Subject], [ApprovalDate], [ApprovalBy], [CreatedBy], [CreatedDate], [FilePath])
        SELECT   [Id],
                 [PONo],
                 [FileNo],
                 [DrawingNo],
                 [Subject],
                 [ApprovalDate],
                 [ApprovalBy],
                 [CreatedBy],
                 [CreatedDate],
                 [FilePath]
        FROM     [dbo].[Drawings]
        ORDER BY [Id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Drawings] OFF;
    END

DROP TABLE [dbo].[Drawings];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Drawings]', N'Drawings';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO

IF EXISTS (SELECT * FROM #tmpErrors) ROLLBACK TRANSACTION
GO
IF @@TRANCOUNT>0 BEGIN
PRINT N'The transacted portion of the database update succeeded.'
COMMIT TRANSACTION
END
ELSE PRINT N'The transacted portion of the database update failed.'
GO
DROP TABLE #tmpErrors
GO
PRINT N'Update complete.';


GO


/*
Deployment script for INDMS20160716

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "INDMS20160716"
:setvar DefaultFilePrefix "INDMS20160716"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL12.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL12.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO

IF (SELECT OBJECT_ID('tempdb..#tmpErrors')) IS NOT NULL DROP TABLE #tmpErrors
GO
CREATE TABLE #tmpErrors (Error int)
GO
SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL READ COMMITTED
GO
BEGIN TRANSACTION
GO
PRINT N'Creating [dbo].[CoveringLetter]...';


GO
CREATE TABLE [dbo].[CoveringLetter] (
    [Id]          NUMERIC (18)  IDENTITY (1, 1) NOT NULL,
    [POId]        VARCHAR (MAX) NULL,
    [PONo]        VARCHAR (MAX) NULL,
    [FileNo]      VARCHAR (MAX) NULL,
    [Date]        DATETIME      NULL,
    [NoOfLots]    VARCHAR (MAX) NULL,
    [POValue]     NUMERIC (18)  NULL,
    [Warantee]    VARCHAR (MAX) NULL,
    [CreatedBy]   VARCHAR (MAX) NULL,
    [CreatedDate] DATETIME      NULL,
    [Active]      VARCHAR (50)  NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating unnamed constraint on [dbo].[CoveringLetter]...';


GO
ALTER TABLE [dbo].[CoveringLetter]
    ADD DEFAULT GETDATE() FOR [CreatedDate];


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating unnamed constraint on [dbo].[CoveringLetter]...';


GO
ALTER TABLE [dbo].[CoveringLetter]
    ADD DEFAULT 'Y' FOR [Active];


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO

IF EXISTS (SELECT * FROM #tmpErrors) ROLLBACK TRANSACTION
GO
IF @@TRANCOUNT>0 BEGIN
PRINT N'The transacted portion of the database update succeeded.'
COMMIT TRANSACTION
END
ELSE PRINT N'The transacted portion of the database update failed.'
GO
DROP TABLE #tmpErrors
GO
PRINT N'Update complete.';


GO
/*
Deployment script for INDMS20160716

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "INDMS20160716"
:setvar DefaultFilePrefix "INDMS20160716"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL12.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL12.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO

IF (SELECT OBJECT_ID('tempdb..#tmpErrors')) IS NOT NULL DROP TABLE #tmpErrors
GO
CREATE TABLE #tmpErrors (Error int)
GO
SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL READ COMMITTED
GO
BEGIN TRANSACTION
GO
PRINT N'Dropping unnamed constraint on [dbo].[CoveringLetter]...';


GO
ALTER TABLE [dbo].[CoveringLetter] DROP CONSTRAINT [DF__CoveringL__Creat__531856C7];


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Dropping unnamed constraint on [dbo].[CoveringLetter]...';


GO
ALTER TABLE [dbo].[CoveringLetter] DROP CONSTRAINT [DF__CoveringL__Activ__540C7B00];


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
/*
The type for column POId in table [dbo].[CoveringLetter] is currently  VARCHAR (MAX) NULL but is being changed to  NUMERIC (18) NULL. Data loss could occur.
*/
GO
PRINT N'Starting rebuilding table [dbo].[CoveringLetter]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_CoveringLetter] (
    [Id]          NUMERIC (18)  IDENTITY (1, 1) NOT NULL,
    [POId]        NUMERIC (18)  NULL,
    [PONo]        VARCHAR (MAX) NULL,
    [FileNo]      VARCHAR (MAX) NULL,
    [Date]        DATETIME      NULL,
    [NoOfLots]    VARCHAR (MAX) NULL,
    [POValue]     NUMERIC (18)  NULL,
    [Warantee]    VARCHAR (MAX) NULL,
    [CreatedBy]   VARCHAR (MAX) NULL,
    [CreatedDate] DATETIME      DEFAULT (getdate()) NULL,
    [Active]      VARCHAR (50)  DEFAULT ('Y') NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[CoveringLetter])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_CoveringLetter] ON;
        INSERT INTO [dbo].[tmp_ms_xx_CoveringLetter] ([Id], [POId], [PONo], [FileNo], [Date], [NoOfLots], [POValue], [Warantee], [CreatedBy], [CreatedDate], [Active])
        SELECT   [Id],
                 [POId],
                 [PONo],
                 [FileNo],
                 [Date],
                 [NoOfLots],
                 [POValue],
                 [Warantee],
                 [CreatedBy],
                 [CreatedDate],
                 [Active]
        FROM     [dbo].[CoveringLetter]
        ORDER BY [Id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_CoveringLetter] OFF;
    END

DROP TABLE [dbo].[CoveringLetter];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_CoveringLetter]', N'CoveringLetter';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO

IF EXISTS (SELECT * FROM #tmpErrors) ROLLBACK TRANSACTION
GO
IF @@TRANCOUNT>0 BEGIN
PRINT N'The transacted portion of the database update succeeded.'
COMMIT TRANSACTION
END
ELSE PRINT N'The transacted portion of the database update failed.'
GO
DROP TABLE #tmpErrors
GO
PRINT N'Update complete.';


GO
/*
Deployment script for INDMS20160716

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "INDMS20160716"
:setvar DefaultFilePrefix "INDMS20160716"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL12.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL12.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Rename refactoring operation with key  is skipped, element [dbo].[POCorrespondence].[Filepath] (SqlSimpleColumn) will not be renamed to FilePath';


GO

IF (SELECT OBJECT_ID('tempdb..#tmpErrors')) IS NOT NULL DROP TABLE #tmpErrors
GO
CREATE TABLE #tmpErrors (Error int)
GO
SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL READ COMMITTED
GO
BEGIN TRANSACTION
GO
PRINT N'Creating [dbo].[POCorrespondence]...';


GO
CREATE TABLE [dbo].[POCorrespondence] (
    [Id]                   INT           NOT NULL,
    [POId]                 NUMERIC (18)  NULL,
    [PONo]                 VARCHAR (MAX) NULL,
    [FileNo]               VARCHAR (MAX) NULL,
    [LetterNo]             VARCHAR (MAX) NULL,
    [Description]          VARCHAR (MAX) NULL,
    [Subject]              VARCHAR (MAX) NULL,
    [TypeOfCorrespondence] VARCHAR (MAX) NULL,
    [From]                 VARCHAR (MAX) NULL,
    [To]                   VARCHAR (MAX) NULL,
    [CopyTo]               VARCHAR (MAX) NULL,
    [Date]                 DATETIME      NULL,
    [FilePath]             VARCHAR (MAX) NULL,
    [CreatedBy]            VARCHAR (MAX) NULL,
    [CreatedDate]          DATETIME      NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [dbo].[Table]...';


GO
CREATE TABLE [dbo].[Table] (
    [Id] INT NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO

IF EXISTS (SELECT * FROM #tmpErrors) ROLLBACK TRANSACTION
GO
IF @@TRANCOUNT>0 BEGIN
PRINT N'The transacted portion of the database update succeeded.'
COMMIT TRANSACTION
END
ELSE PRINT N'The transacted portion of the database update failed.'
GO
DROP TABLE #tmpErrors
GO
PRINT N'Update complete.';


GO
/*-----------------------------------------------------------------------*/
/*
Deployment script for INDMS20160716

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "INDMS20160716"
:setvar DefaultFilePrefix "INDMS20160716"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL12.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL12.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO

IF (SELECT OBJECT_ID('tempdb..#tmpErrors')) IS NOT NULL DROP TABLE #tmpErrors
GO
CREATE TABLE #tmpErrors (Error int)
GO
SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL READ COMMITTED
GO
BEGIN TRANSACTION
GO
PRINT N'Starting rebuilding table [dbo].[POCorrespondence]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_POCorrespondence] (
    [Id]                   INT           IDENTITY (1, 1) NOT NULL,
    [POId]                 NUMERIC (18)  NULL,
    [PONo]                 VARCHAR (MAX) NULL,
    [FileNo]               VARCHAR (MAX) NULL,
    [LetterNo]             VARCHAR (MAX) NULL,
    [Description]          VARCHAR (MAX) NULL,
    [Subject]              VARCHAR (MAX) NULL,
    [TypeOfCorrespondence] VARCHAR (MAX) NULL,
    [From]                 VARCHAR (MAX) NULL,
    [To]                   VARCHAR (MAX) NULL,
    [CopyTo]               VARCHAR (MAX) NULL,
    [Date]                 DATETIME      NULL,
    [FilePath]             VARCHAR (MAX) NULL,
    [CreatedBy]            VARCHAR (MAX) NULL,
    [CreatedDate]          DATETIME      NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[POCorrespondence])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_POCorrespondence] ON;
        INSERT INTO [dbo].[tmp_ms_xx_POCorrespondence] ([Id], [POId], [PONo], [FileNo], [LetterNo], [Description], [Subject], [TypeOfCorrespondence], [From], [To], [CopyTo], [Date], [FilePath], [CreatedBy], [CreatedDate])
        SELECT   [Id],
                 [POId],
                 [PONo],
                 [FileNo],
                 [LetterNo],
                 [Description],
                 [Subject],
                 [TypeOfCorrespondence],
                 [From],
                 [To],
                 [CopyTo],
                 [Date],
                 [FilePath],
                 [CreatedBy],
                 [CreatedDate]
        FROM     [dbo].[POCorrespondence]
        ORDER BY [Id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_POCorrespondence] OFF;
    END

DROP TABLE [dbo].[POCorrespondence];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_POCorrespondence]', N'POCorrespondence';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO

IF EXISTS (SELECT * FROM #tmpErrors) ROLLBACK TRANSACTION
GO
IF @@TRANCOUNT>0 BEGIN
PRINT N'The transacted portion of the database update succeeded.'
COMMIT TRANSACTION
END
ELSE PRINT N'The transacted portion of the database update failed.'
GO
DROP TABLE #tmpErrors
GO
PRINT N'Update complete.';


GO
/*-----------------------------------------------------------------------*/

/*
Deployment script for INDMS20160716

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "INDMS20160716"
:setvar DefaultFilePrefix "INDMS20160716"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL12.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL12.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO

IF (SELECT OBJECT_ID('tempdb..#tmpErrors')) IS NOT NULL DROP TABLE #tmpErrors
GO
CREATE TABLE #tmpErrors (Error int)
GO
SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL READ COMMITTED
GO
BEGIN TRANSACTION
GO
/*
The type for column Id in table [dbo].[POCorrespondence] is currently  INT IDENTITY (1, 1) NOT NULL but is being changed to  NUMERIC (18) IDENTITY (1, 1) NOT NULL. Data loss could occur.
*/
GO
PRINT N'Starting rebuilding table [dbo].[POCorrespondence]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_POCorrespondence] (
    [Id]                   NUMERIC (18)  IDENTITY (1, 1) NOT NULL,
    [POId]                 NUMERIC (18)  NULL,
    [PONo]                 VARCHAR (MAX) NULL,
    [FileNo]               VARCHAR (MAX) NULL,
    [LetterNo]             VARCHAR (MAX) NULL,
    [Description]          VARCHAR (MAX) NULL,
    [Subject]              VARCHAR (MAX) NULL,
    [TypeOfCorrespondence] VARCHAR (MAX) NULL,
    [From]                 VARCHAR (MAX) NULL,
    [To]                   VARCHAR (MAX) NULL,
    [CopyTo]               VARCHAR (MAX) NULL,
    [Date]                 DATETIME      NULL,
    [FilePath]             VARCHAR (MAX) NULL,
    [CreatedBy]            VARCHAR (MAX) NULL,
    [CreatedDate]          DATETIME      NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[POCorrespondence])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_POCorrespondence] ON;
        INSERT INTO [dbo].[tmp_ms_xx_POCorrespondence] ([Id], [POId], [PONo], [FileNo], [LetterNo], [Description], [Subject], [TypeOfCorrespondence], [From], [To], [CopyTo], [Date], [FilePath], [CreatedBy], [CreatedDate])
        SELECT   [Id],
                 [POId],
                 [PONo],
                 [FileNo],
                 [LetterNo],
                 [Description],
                 [Subject],
                 [TypeOfCorrespondence],
                 [From],
                 [To],
                 [CopyTo],
                 [Date],
                 [FilePath],
                 [CreatedBy],
                 [CreatedDate]
        FROM     [dbo].[POCorrespondence]
        ORDER BY [Id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_POCorrespondence] OFF;
    END

DROP TABLE [dbo].[POCorrespondence];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_POCorrespondence]', N'POCorrespondence';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO

IF EXISTS (SELECT * FROM #tmpErrors) ROLLBACK TRANSACTION
GO
IF @@TRANCOUNT>0 BEGIN
PRINT N'The transacted portion of the database update succeeded.'
COMMIT TRANSACTION
END
ELSE PRINT N'The transacted portion of the database update failed.'
GO
DROP TABLE #tmpErrors
GO
PRINT N'Update complete.';


GO

/*---------------------------------------------------------------------------*/
/*
Deployment script for INDMS20160716

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "INDMS20160716"
:setvar DefaultFilePrefix "INDMS20160716"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL12.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL12.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO

IF (SELECT OBJECT_ID('tempdb..#tmpErrors')) IS NOT NULL DROP TABLE #tmpErrors
GO
CREATE TABLE #tmpErrors (Error int)
GO
SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL READ COMMITTED
GO
BEGIN TRANSACTION
GO
PRINT N'Dropping unnamed constraint on [dbo].[Photographs]...';


GO
ALTER TABLE [dbo].[Photographs] DROP CONSTRAINT [DF__tmp_ms_xx__Creat__29221CFB];


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Starting rebuilding table [dbo].[Photographs]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Photographs] (
    [Id]          NUMERIC (18)  IDENTITY (1, 1) NOT NULL,
    [POId]        NUMERIC (18)  NULL,
    [PONo]        VARCHAR (MAX) NULL,
    [FolderName]  VARCHAR (MAX) NULL,
    [Subject]     VARCHAR (MAX) NULL,
    [Date]        DATETIME      NULL,
    [FilePath]    VARCHAR (MAX) NULL,
    [CreatedDate] DATETIME      DEFAULT (getdate()) NULL,
    [CreatedBy]   VARCHAR (MAX) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Photographs])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Photographs] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Photographs] ([Id], [FolderName], [Subject], [Date], [FilePath], [CreatedDate], [CreatedBy])
        SELECT   [Id],
                 [FolderName],
                 [Subject],
                 [Date],
                 [FilePath],
                 [CreatedDate],
                 [CreatedBy]
        FROM     [dbo].[Photographs]
        ORDER BY [Id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Photographs] OFF;
    END

DROP TABLE [dbo].[Photographs];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Photographs]', N'Photographs';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO

IF EXISTS (SELECT * FROM #tmpErrors) ROLLBACK TRANSACTION
GO
IF @@TRANCOUNT>0 BEGIN
PRINT N'The transacted portion of the database update succeeded.'
COMMIT TRANSACTION
END
ELSE PRINT N'The transacted portion of the database update failed.'
GO
DROP TABLE #tmpErrors
GO
PRINT N'Update complete.';


GO
/*--------------------------------------------------------------*/
/*
Deployment script for INDMS20160716

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "INDMS20160716"
:setvar DefaultFilePrefix "INDMS20160716"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL12.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL12.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO

IF (SELECT OBJECT_ID('tempdb..#tmpErrors')) IS NOT NULL DROP TABLE #tmpErrors
GO
CREATE TABLE #tmpErrors (Error int)
GO
SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL READ COMMITTED
GO
BEGIN TRANSACTION
GO
PRINT N'Altering [dbo].[Standards]...';


GO
ALTER TABLE [dbo].[Standards] ALTER COLUMN [FilePath] VARCHAR (MAX) NULL;

ALTER TABLE [dbo].[Standards] ALTER COLUMN [Revision] VARCHAR (MAX) NULL;

ALTER TABLE [dbo].[Standards] ALTER COLUMN [StandardNo] VARCHAR (MAX) NULL;

ALTER TABLE [dbo].[Standards] ALTER COLUMN [Subject] VARCHAR (MAX) NULL;

ALTER TABLE [dbo].[Standards] ALTER COLUMN [SubjectParam] VARCHAR (50) NULL;

ALTER TABLE [dbo].[Standards] ALTER COLUMN [Type] VARCHAR (50) NULL;

ALTER TABLE [dbo].[Standards] ALTER COLUMN [Year] VARCHAR (10) NULL;


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO

IF EXISTS (SELECT * FROM #tmpErrors) ROLLBACK TRANSACTION
GO
IF @@TRANCOUNT>0 BEGIN
PRINT N'The transacted portion of the database update succeeded.'
COMMIT TRANSACTION
END
ELSE PRINT N'The transacted portion of the database update failed.'
GO
DROP TABLE #tmpErrors
GO
PRINT N'Update complete.';


GO
/*-----------------------------------------------------------*/
/*
Deployment script for INDMS20160716

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "INDMS20160716"
:setvar DefaultFilePrefix "INDMS20160716"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL12.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL12.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO

IF (SELECT OBJECT_ID('tempdb..#tmpErrors')) IS NOT NULL DROP TABLE #tmpErrors
GO
CREATE TABLE #tmpErrors (Error int)
GO
SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL READ COMMITTED
GO
BEGIN TRANSACTION
GO
PRINT N'Altering [dbo].[StandingOrders]...';


GO
ALTER TABLE [dbo].[StandingOrders] ALTER COLUMN [IssuingAuthority] VARCHAR (MAX) NULL;

ALTER TABLE [dbo].[StandingOrders] ALTER COLUMN [Revision] VARCHAR (MAX) NULL;

ALTER TABLE [dbo].[StandingOrders] ALTER COLUMN [Subject] VARCHAR (MAX) NULL;

ALTER TABLE [dbo].[StandingOrders] ALTER COLUMN [Year] VARCHAR (50) NULL;


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO

IF EXISTS (SELECT * FROM #tmpErrors) ROLLBACK TRANSACTION
GO
IF @@TRANCOUNT>0 BEGIN
PRINT N'The transacted portion of the database update succeeded.'
COMMIT TRANSACTION
END
ELSE PRINT N'The transacted portion of the database update failed.'
GO
DROP TABLE #tmpErrors
GO
PRINT N'Update complete.';


GO
/*----------------------------------------------------------*/
/*
Deployment script for INDMS20160716

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "INDMS20160716"
:setvar DefaultFilePrefix "INDMS20160716"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL12.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL12.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO

IF (SELECT OBJECT_ID('tempdb..#tmpErrors')) IS NOT NULL DROP TABLE #tmpErrors
GO
CREATE TABLE #tmpErrors (Error int)
GO
SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL READ COMMITTED
GO
BEGIN TRANSACTION
GO
PRINT N'Altering [dbo].[Standards]...';


GO
ALTER TABLE [dbo].[Standards] ALTER COLUMN [FilePath] VARCHAR (MAX) NOT NULL;


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO

IF EXISTS (SELECT * FROM #tmpErrors) ROLLBACK TRANSACTION
GO
IF @@TRANCOUNT>0 BEGIN
PRINT N'The transacted portion of the database update succeeded.'
COMMIT TRANSACTION
END
ELSE PRINT N'The transacted portion of the database update failed.'
GO
DROP TABLE #tmpErrors
GO
PRINT N'Update complete.';


GO
/*---------------------------------------------------*/