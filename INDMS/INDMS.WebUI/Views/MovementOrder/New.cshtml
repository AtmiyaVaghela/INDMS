@model INDMS.WebUI.ViewModels.MovementOrderViewModel

@{
    ViewBag.Title = "New - Movement Order";
}


<div class="content-wrapper">
    <!-- Content Header (Page header) -->
    <section class="content-header">
        <h1>
            New - Movement Order
        </h1>
        <ol class="breadcrumb">
            <li><a href="#"><i class="fa fa-dashboard"></i>Library</a></li>
            <li class="active">Movement Order</li>
        </ol>
    </section>
    <!-- Main content -->
    <section class="content" style="font-size:medium">
        <!-- Your Page Content Here -->
        <div class="row">
            <div class="col-md-12">
                @if (TempData["MSG"] != null)
                {
                    <div class="alert alert-success alert-dismissable">
                        <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
                        @TempData["MSG"]
                    </div>
                }
                @if (TempData["Error"] != null)
                {
                    <div class="alert alert-danger alert-dismissable">
                        <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
                        @TempData["Error"]
                    </div>
                }
            </div>
        </div>

        <div class="box box-primary">
            <div class="box-header with-border">
                <h3 class="box-title">
                    @Html.ActionLink("Back", "Index", null, new { @class = "btn btn-primary" })
                </h3>
            </div> @*/ .box-header*@
            <!--form start-->
            @using (Html.BeginForm("New", "MovementOrder", FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
                <div class="form-horizontal">
                    @Html.AntiForgeryToken()
                    <div class="box-body">
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="form-group">

                            @Html.Label("", "Movement Order No.", new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                @Html.TextBoxFor(model => model.MovementOrder.OrderNo, null, new { @class = "form-control", @onkeyup = "javascript:this.value=this.value.toUpperCase();" })
                                @Html.ValidationMessageFor(model => model.MovementOrder.OrderNo, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.Label("", "Subject", new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                @Html.TextBoxFor(model => model.MovementOrder.Subject, null, new { @class = "form-control", @onkeyup = "javascript:this.value=this.value.toUpperCase();" })
                                @Html.ValidationMessageFor(model => model.MovementOrder.Subject, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.MovementOrder.Date, new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                <div class="input-group">
                                    <div class="input-group-addon">
                                        <i class="fa fa-calendar"></i>
                                    </div>
                                    @Html.TextBoxFor(m => m.MovementOrder.Date, new { @class = "form-control dp" })
                                </div><!-- /.input group -->
                                @Html.ValidationMessageFor(model => model.MovementOrder.Date, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.Label("", "Inspector Name", new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                <select id="sInspectorName" class="form-control select2" name="MovementOrder.InspectorName"></select>
                            </div>

                            <div class="col-md-4">
                                @Html.TextBoxFor(model => model.MovementOrder.Designation, null, new { @class = "form-control", @disabled = "disabled", @placeholder = "Designation" })
                                @Html.ValidationMessageFor(model => model.MovementOrder.Designation, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.Label("", "Firm Name", new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                <select id="MovementOrder_FirmName" class="form-control select2" name="MovementOrder.FirmName"></select>
                                @Html.ValidationMessageFor(model => model.MovementOrder.FirmName, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <!--Onward Journey-->
                        <div class="form-group">
                            @Html.Label("", "Onward Journey", new { @class = "control-label col-md-2" })
                        </div>
                        <div class="form-group">
                            @Html.Label("", "Date & Time", new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                @Html.TextBoxFor(model => model.OnwordDateAndTime, null, new { @class = "form-control" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.Label("", "From", new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                @Html.TextBoxFor(model => model.MovementOrder.OnwordFrom, null, new { @class = "form-control", @placeholder = "From" })
                                @Html.ValidationMessageFor(model => model.MovementOrder.OnwordFrom, "", new { @class = "text-danger" })
                            </div>

                            <div class="col-md-4">
                                @Html.TextBoxFor(model => model.MovementOrder.OnwordTo, null, new { @class = "form-control", @placeholder = "To" })
                                @Html.ValidationMessageFor(model => model.MovementOrder.OnwordTo, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.Label("", "Mode Of Travel", new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                <select id="MovementOrder_OnwordModeOfTravel" name="MovementOrder.OnwordModeOfTravel" class="form-control select2 mot"></select>
                                @Html.ValidationMessageFor(model => model.MovementOrder.OnwordModeOfTravel, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-md-4" id="divOnwordMOT" style="display:none;">
                                @Html.TextBoxFor(model => model.OnwardModeOfTravel, null, new { @class = "form-control" })
                            </div>
                        </div>

                        <!--Return Journey-->
                        <div class="form-group">
                            @Html.Label("", "Return Journey", new { @class = "control-label col-md-2" })
                        </div>
                        <div class="form-group">
                            @Html.Label("", "Date & Time", new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                @Html.TextBoxFor(model => model.ReturnDateAndTime, null, new { @class = "form-control" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.Label("", "From", new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                @Html.TextBoxFor(model => model.MovementOrder.ReturnFrom, null, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.MovementOrder.ReturnFrom, "", new { @class = "text-danger" })
                            </div>

                            <div class="col-md-4">
                                @Html.TextBoxFor(model => model.MovementOrder.ReturnTo, null, new { @class = "form-control", @placeholder = "To" })
                                @Html.ValidationMessageFor(model => model.MovementOrder.ReturnTo, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.Label("", "Mode Of Travel", new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                <select id="MovementOrder_ReturnModeOfTravel" name="MovementOrder.ReturnModeOfTravel" class="form-control select2 mot"></select>
                                @Html.ValidationMessageFor(model => model.MovementOrder.ReturnModeOfTravel, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-md-4" id="divReturnMOT" style="display:none;">
                                @Html.TextBoxFor(model => model.ReturnModeOfTravel, null, new { @class = "form-control" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.Label("", "Signing Authority", new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                <select id="sSigningAuthority" class="form-control select2" name="MovementOrder.SigningAuthority"></select>
                            </div>
                            <div class="col-md-4">
                                @Html.TextBoxFor(model => model.MovementOrder.SADesignation, null, new { @class = "form-control", @disabled = "disabled", @placeholder = "Designation" })
                                @Html.ValidationMessageFor(model => model.MovementOrder.SADesignation, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="box-footer">
                        <div class="col-md-offset-2 col-md-6">
                            <button type="submit" class="btn btn-primary">Submit</button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </section><!-- /.content -->
</div><!-- /.content-wrapper -->
@section scripts{
    <script>
        $(function () {

            $("#OnwordDateAndTime").daterangepicker({
                timePicker: true,
                timePickerIncrement: 30,
                format: 'DD/MM/YYYY h:mm A'
            });

            $("#ReturnDateAndTime").daterangepicker({
                timePicker: true,
                timePickerIncrement: 30,
                format: 'DD/MM/YYYY h:mm A'
            });



            var insData;

            $.ajax({
                url: "@Url.Action("GetJsonObjOfUsers", "Library")",
                type: 'GET',
                data: {},
                success: function (data) {
                    $('#sInspectorName').empty();
                    $('#sSigningAuthority').empty();
                    insData = data;
                    $.each(data, function (index, optiondata) {
                        $("#sInspectorName").append("<option value='" + optiondata.UserId + "'>" + optiondata.Name + "</option>");
                        $("#sSigningAuthority").append("<option value='" + optiondata.UserId + "'>" + optiondata.Name + "</option>");
                    });
                    //$("#sApprovalBy").append("<option value='OTHERS'>OTHERS</option>");
                    $("#sInspectorName option").eq(0).before($("<option></option>").val("").text("-Select-"));
                    $("#sSigningAuthority option").eq(0).before($("<option></option>").val("").text("-Select-"));

                    $('#sInspectorName').select2("val", "");
                    $('#sSigningAuthority').select2("val", "");
                },

                error: function (xhr) {
                    alert("Something seems Wrong binding Inspector Name");

                }
            });

            $("#sInspectorName").change(function () {
                if (insData != null) {
                    $.each(insData, function (index, optionData) {
                        if ($("#sInspectorName").val() == optionData.UserId) {
                            $("#MovementOrder_Designation").val(optionData.Designation);
                        }
                    });
                }
                else {
                    console.log("Designatino data is null");
                }

            });

            $.ajax({
                url: "@Url.Action("GetFirms", "Utility")",
                type: 'GET',
                data: {},
                success: function (data) {
                    $('#MovementOrder_FirmName').empty();

                    $.each(data, function (index, optiondata) {
                        $("#MovementOrder_FirmName").append("<option value='" + optiondata.Id + "'>" + optiondata.FirmName + "</option>");
                    });
                    //$("#sApprovalBy").append("<option value='OTHERS'>OTHERS</option>");
                    $("#MovementOrder_FirmName option").eq(0).before($("<option></option>").val("").text("-Select-"));
                    $('#MovementOrder_FirmName').select2("val", "");
                },

                error: function (xhr) {
                    alert("Something seems Wrong binding Firm");

                }
            });

            $("#MovementOrder_OnwardStartDate").daterangepicker({
                timePicker: true,
                timePickerIncrement: 30,
                format: 'DD/MM/YYYY h:mm A'
            });

            $.ajax({
                url: "@Url.Action("GetJsonObjOfParam","Library")",
                type: 'POST',
                data: { data: "ModeOfTravel" },
                success: function (data) {
                    $('.mot').empty();
                    $.each(data, function (index, optiondata) {
                        $(".mot").append("<option value='" + optiondata + "'>" + optiondata + "</option>");
                    });
                    $(".mot").each(function () {
                        $(this).append("<option value='OTHERS'>OTHERS</option>");
                        $(this).find("option").eq(0).before($("<option></option>").val("").text("-Select-"));
                        //$(".mot option").eq(0).before($("<option></option>").val("").text("-Select-"));
                        $(this).select2("val", "");
                    });
                },

                error: function (xhr) {
                    alert("Something seems Wrong");

                }
            });
         
            $("#MovementOrder_OnwordModeOfTravel").change(function () {
                if ($(this).val() == "OTHERS") {
                    $('#divOnwordMOT').css('display', 'block');
                }
            });
         
            $("#MovementOrder_ReturnModeOfTravel").change(function () {
                if ($(this).val() == "OTHERS") {
                    $('#divReturnMOT').css('display', 'block');
                }
            });

            $('li').removeClass("active");
            $('#liLibrary').addClass("active")
            $('#liMovementOrder ').addClass("active")
            $('#liMovementOrder i').addClass("text-aqua")
        });
    </script>
}
